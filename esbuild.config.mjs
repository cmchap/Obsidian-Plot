import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// List of files to copy to dist
const distFiles = [
    { src: 'src/styles.css', dest: 'dist/styles.css' },
    { src: 'src/manifest.json', dest: 'dist/manifest.json' },
];

// Check if versions.json exists and add it to distFiles if it does
try {
    await fs.access('versions.json');
    distFiles.push({ src: 'versions.json', dest: 'dist/versions.json' });
} catch {}

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "dist/main.js",
});

// Ensure dist directory exists
try {
    await fs.access('dist');
} catch {
    await fs.mkdir('dist');
}

// Copy all distribution files
for (const file of distFiles) {
    try {
        await fs.copyFile(file.src, file.dest);
        console.log(`Copied ${file.src} to ${file.dest}`);
    } catch (err) {
        console.error(`Failed to copy ${file.src}: ${err.message}`);
    }
}

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
}
